diff -urN nginx-0.7.65/auto/modules nginx-0.7.65_full_status/auto/modules
--- nginx-0.7.65/auto/modules	2009-10-26 19:38:44.000000000 +0300
+++ nginx-0.7.65_full_status/auto/modules	2010-06-26 20:03:18.000000000 +0400
@@ -331,6 +331,12 @@
     HTTP_SRCS="$HTTP_SRCS src/http/modules/ngx_http_stub_status_module.c"
 fi
 
+if [ $HTTP_FULL_STATUS = YES ]; then
+    have=NGX_FULL_STATUS . auto/have
+    HTTP_MODULES="$HTTP_MODULES ngx_http_full_status_module"
+    HTTP_SRCS="$HTTP_SRCS src/http/modules/ngx_http_full_status_module.c"
+fi
+
 #if [ -r $NGX_OBJS/auto ]; then
 #    . $NGX_OBJS/auto
 #fi
diff -urN nginx-0.7.65/auto/options nginx-0.7.65_full_status/auto/options
--- nginx-0.7.65/auto/options	2009-10-26 19:38:44.000000000 +0300
+++ nginx-0.7.65_full_status/auto/options	2010-06-26 20:23:01.000000000 +0400
@@ -90,6 +90,7 @@
 
 # STUB
 HTTP_STUB_STATUS=NO
+HTTP_FULL_STATUS=YES
 
 MAIL=NO
 MAIL_SSL=NO
@@ -220,7 +221,9 @@
 
         # STUB
         --with-http_stub_status_module)  HTTP_STUB_STATUS=YES       ;;
-
+        # FULL STATUS
+        --with-http_full_status_module)  HTTP_FULL_STATUS=YES       ;;
+	
         --with-mail)                     MAIL=YES                   ;;
         --with-mail_ssl_module)          MAIL_SSL=YES               ;;
         # STUB
@@ -320,7 +323,8 @@
   --with-http_random_index_module    enable ngx_http_random_index_module
   --with-http_secure_link_module     enable ngx_http_secure_link_module
   --with-http_stub_status_module     enable ngx_http_stub_status_module
-
+  --with-http_full_status_module     enable ngx_http_full_status_module
+  
   --without-http_charset_module      disable ngx_http_charset_module
   --without-http_gzip_module         disable ngx_http_gzip_module
   --without-http_ssi_module          disable ngx_http_ssi_module
diff -urN nginx-0.7.65/src/core/ngx_core.h nginx-0.7.65_full_status/src/core/ngx_core.h
--- nginx-0.7.65/src/core/ngx_core.h	2008-09-05 19:43:34.000000000 +0400
+++ nginx-0.7.65_full_status/src/core/ngx_core.h	2010-06-26 20:03:18.000000000 +0400
@@ -76,6 +76,30 @@
 #include <ngx_os.h>
 #include <ngx_connection.h>
 
+#if (NGX_FULL_STATUS)
+/* 
+ * As we do not check hostname is one of defined in nginx.conf,
+ * we should not dynamicly relocate shared memory for statistics. That's
+ * why statistic is a static array.
+ */
+
+#define MAX_VIHOST_COUNT 4096
+#define MAX_VIHOST_NAME_LEN 64
+
+typedef struct {
+    u_char         server_name[MAX_VIHOST_NAME_LEN];
+    ngx_atomic_t   ngx_stat_time;    
+    ngx_atomic_t   ngx_stat_requests; 
+    ngx_atomic_t   ngx_stat_traf;
+} ngx_server_stat_t;
+
+typedef struct {
+    ngx_server_stat_t server_stat[MAX_VIHOST_COUNT];
+    size_t            server_stat_count;   
+} ngx_servers_stat_t;
+
+ngx_server_stat_t *find_stat(ngx_str_t server_name);
+#endif
 
 #define LF     (u_char) 10
 #define CR     (u_char) 13
@@ -83,7 +107,7 @@
 
 
 #define ngx_abs(value)   (((value) >= 0) ? (value) : - (value))
-
+#define min(a, b)  ( (a > b) ? b : a )
 void ngx_cpuinfo(void);
 
 
diff -urN nginx-0.7.65/src/http/modules/ngx_http_full_status_module.c nginx-0.7.65_full_status/src/http/modules/ngx_http_full_status_module.c
--- nginx-0.7.65/src/http/modules/ngx_http_full_status_module.c	1970-01-01 03:00:00.000000000 +0300
+++ nginx-0.7.65_full_status/src/http/modules/ngx_http_full_status_module.c	2010-06-26 20:21:51.000000000 +0400
@@ -0,0 +1,266 @@
+/*
+ * Rebrikov Alexander, pgriffin@reg.ru
+ */
+
+
+#include <ngx_config.h>
+#include <ngx_core.h>
+#include <ngx_http.h>
+
+static ngx_int_t ngx_status_module_init(ngx_cycle_t *cycle);
+ngx_servers_stat_t *ngx_servers_stat;
+
+ngx_int_t init_stat_server(ngx_server_stat_t *new_server, ngx_str_t server_name);
+
+static char *ngx_http_set_full_status(ngx_conf_t *cf, ngx_command_t *cmd,
+                                 void *conf);
+
+static ngx_command_t  ngx_http_full_status_commands[] = {
+
+    { ngx_string("full_status"),
+      NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_FLAG,
+      ngx_http_set_full_status,
+      0,
+      0,
+      NULL },
+
+      ngx_null_command
+};
+
+
+
+static ngx_http_module_t  ngx_http_full_status_module_ctx = {
+    NULL,                                  /* preconfiguration */
+    NULL,                                  /* postconfiguration */
+
+    NULL,                                  /* create main configuration */
+    NULL,                                  /* init main configuration */
+
+    NULL,                                  /* create server configuration */
+    NULL,                                  /* merge server configuration */
+
+    NULL,                                  /* create location configuration */
+    NULL                                   /* merge location configuration */
+};
+
+
+ngx_module_t  ngx_http_full_status_module = {
+    NGX_MODULE_V1,
+    &ngx_http_full_status_module_ctx,      /* module context */
+    ngx_http_full_status_commands,              /* module directives */
+    NGX_HTTP_MODULE,                       /* module type */
+    NULL,                                  /* init master */
+    ngx_status_module_init,                /* init module */
+    NULL,                                  /* init process */
+    NULL,                                  /* init thread */
+    NULL,                                  /* exit thread */
+    NULL,                                  /* exit process */
+    NULL,                                  /* exit master */
+    NGX_MODULE_V1_PADDING
+};
+
+static ngx_int_t
+ngx_status_module_init(ngx_cycle_t *cycle) {
+    u_char              *shared;
+    size_t               cl;
+    ngx_shm_t            shm;
+    
+    size_t server_stat_size = sizeof( ngx_servers_stat_t );
+    cl = 128;
+    int div = server_stat_size / cl;
+    int mod = server_stat_size % cl;
+    server_stat_size = (div + (mod ? 1 : 0)) * cl;
+
+    shm.size = server_stat_size;
+    shm.name.len = sizeof("nginx_stat_shared_zone");
+    shm.name.data = (u_char *) "nginx_stat_shared_zone";
+    shm.log = cycle->log;
+
+    if (ngx_shm_alloc(&shm) != NGX_OK) {
+        return NGX_ERROR;
+    }
+
+    shared = shm.addr;
+
+    ngx_servers_stat = (ngx_servers_stat_t *) shared;
+    ngx_servers_stat->server_stat_count = 0;
+    return NGX_OK;
+}
+
+ngx_int_t compare_servers( const void *s1, const void *s2 ) {
+    return ngx_strcmp( 
+	((ngx_server_stat_t *) s1)->server_name, 
+	((ngx_server_stat_t *) s2)->server_name 
+    );
+}
+
+static ngx_int_t ngx_http_full_status_handler(ngx_http_request_t *r)
+{
+    size_t             size;
+    ngx_int_t          rc;
+    ngx_buf_t         *b;
+    ngx_chain_t        out;
+    ngx_atomic_int_t   rq, at;
+
+    if (r->method != NGX_HTTP_GET && r->method != NGX_HTTP_HEAD) {
+        return NGX_HTTP_NOT_ALLOWED;
+    }
+
+    rc = ngx_http_discard_request_body(r);
+
+    if (rc != NGX_OK) {
+        return rc;
+    }
+
+    r->headers_out.content_type.len = sizeof("text/plain") - 1;
+    r->headers_out.content_type.data = (u_char *) "text/plain";
+
+    if (r->method == NGX_HTTP_HEAD) {
+        r->headers_out.status = NGX_HTTP_OK;
+
+        rc = ngx_http_send_header(r);
+
+        if (rc == NGX_ERROR || rc > NGX_OK || r->header_only) {
+            return rc;
+        }
+    }
+    
+    size_t server_count = ngx_servers_stat->server_stat_count;
+    size = sizeof("vihost\t\t\t\trequests\t\tactive_time(msec) \t\ttraf\n") + // это на заголовок
+           3 * 11  * server_count +                                        // это на числовые характеристики
+           (sizeof("  \n")) * 20 * server_count;                           // это на пробелы  
+                                                            
+    size_t i;
+    ngx_server_stat_t *tmp = (ngx_server_stat_t *) 
+	malloc( server_count * sizeof( ngx_server_stat_t ) );
+    for ( i = 0; i < server_count; i++ ) {
+	tmp[i] = ngx_servers_stat->server_stat[i];
+    }
+    
+    ngx_sort( 
+	(void *)tmp,
+	server_count,
+	sizeof( ngx_server_stat_t ),
+	compare_servers
+    );
+    
+    for (i = 0; i < server_count; i++) {
+        ngx_server_stat_t *stat_server = tmp + i;
+        size += strlen((char *)stat_server->server_name) + 1;
+    }
+     
+    b = ngx_create_temp_buf(r->pool, size);
+    if (b == NULL) {
+        return NGX_HTTP_INTERNAL_SERVER_ERROR;
+    }
+
+    out.buf = b;
+    out.next = NULL;
+    
+    b->last = ngx_cpymem(b->last, 
+	"vihost\t\t\t\trequests\t\tactive_time(msec)\t\ttraf\n", 
+        sizeof("vihost\t\t\t\trequests\t\tactive_time(msec)\t\ttraf\n") - 1);
+    for (i = 0; i < server_count; i++) {
+        ngx_server_stat_t * server = tmp + i;
+        rq = server->ngx_stat_requests;
+        at = server->ngx_stat_time;
+
+        b->last = ngx_cpymem(b->last, server->server_name, strlen((char *)server->server_name));
+        b->last = ngx_sprintf(b->last, "\t\t\t%uA\t\t\t%uA\t\t\t\t%uA\n",  rq, at,
+	    server->ngx_stat_traf);
+    }
+    
+    free( (void *) tmp );
+    
+    b->last = ngx_sprintf(b->last, "\0");
+    r->headers_out.status = NGX_HTTP_OK;
+    r->headers_out.content_length_n = b->last - b->pos;
+
+    b->last_buf = 1;
+
+    rc = ngx_http_send_header(r);
+
+    if (rc == NGX_ERROR || rc > NGX_OK || r->header_only) {
+        return rc;
+    }
+
+    return ngx_http_output_filter(r, &out);
+}
+
+
+static char *ngx_http_set_full_status(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
+{
+    ngx_http_core_loc_conf_t  *clcf;
+
+    clcf = ngx_http_conf_get_module_loc_conf(cf, ngx_http_core_module);
+    clcf->handler = ngx_http_full_status_handler;
+
+    return NGX_CONF_OK;
+}
+
+ngx_str_t to_lower_and_cleanup_www(ngx_str_t server_name) {
+    unsigned i = 0;
+    ngx_str_t s;
+    ngx_str_t www = ngx_string( "www." );
+            
+    s.len = server_name.len;
+    s.data = (u_char *) malloc( server_name.len + 1 );
+    ngx_strlow( s.data, server_name.data, s.len );
+    
+    if ( !ngx_strncmp( www.data, s.data, 4 ) ) {
+	u_char *to_lower = s.data;
+	
+	s.data = (u_char *) malloc( server_name.len - 3 );
+	for ( i = 4; i <= s.len; i++ ) {
+	    s.data[i - 4] = to_lower[i];
+	} 
+	s.len -= 4;
+	s.data[s.len] = '\0';
+	free( (void *)to_lower );
+    }
+    
+    return s;
+}
+
+ngx_server_stat_t *find_stat(ngx_str_t cname) {
+    size_t i;
+    
+    ngx_str_t server_name = to_lower_and_cleanup_www( cname );
+    for (i = 0; i < ngx_servers_stat->server_stat_count; i++) {
+        ngx_server_stat_t *stat_server = &(ngx_servers_stat->server_stat[i]);
+                                   
+        if (
+	    strlen( (char *) stat_server->server_name ) == server_name.len &&
+	    !ngx_strncmp(stat_server->server_name, server_name.data, server_name.len)
+	) {
+	    free( (void *) server_name.data );
+	    return stat_server;
+	}
+    }
+
+    if ( ngx_servers_stat->server_stat_count == MAX_VIHOST_COUNT ) {
+	free( (void *) server_name.data );
+	return NULL;
+    }
+    
+    ngx_server_stat_t *new_server = 
+	&(ngx_servers_stat->server_stat[ngx_servers_stat->server_stat_count]);
+    ngx_servers_stat->server_stat_count++;
+    
+    if ( init_stat_server(new_server, server_name) == NGX_OK ) {
+	free( (void *) server_name.data );
+        return new_server;
+    }
+    else {
+	free( (void *) server_name.data );
+        return NULL;
+    }
+}
+
+ngx_int_t init_stat_server(ngx_server_stat_t *new_server, ngx_str_t server_name) {
+    ngx_cpystrn(new_server->server_name, server_name.data, min(server_name.len + 1, MAX_VIHOST_NAME_LEN));
+    new_server->ngx_stat_time = 0;
+    new_server->ngx_stat_requests = 0;
+    new_server->ngx_stat_traf = 0;
+    return NGX_OK;
+}
diff -urN nginx-0.7.65/src/http/ngx_http.c nginx-0.7.65_full_status/src/http/ngx_http.c
--- nginx-0.7.65/src/http/ngx_http.c	2009-11-16 18:00:13.000000000 +0300
+++ nginx-0.7.65_full_status/src/http/ngx_http.c	2010-06-26 20:03:18.000000000 +0400
@@ -8,7 +8,6 @@
 #include <ngx_core.h>
 #include <ngx_http.h>
 
-
 static char *ngx_http_block(ngx_conf_t *cf, ngx_command_t *cmd, void *conf);
 static ngx_int_t ngx_http_init_phases(ngx_conf_t *cf,
     ngx_http_core_main_conf_t *cmcf);
@@ -99,7 +98,6 @@
     NULL
 };
 
-
 ngx_module_t  ngx_http_module = {
     NGX_MODULE_V1,
     &ngx_http_module_ctx,                  /* module context */
@@ -115,7 +113,6 @@
     NGX_MODULE_V1_PADDING
 };
 
-
 static char *
 ngx_http_block(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
 {
@@ -128,7 +125,7 @@
     ngx_http_core_loc_conf_t    *clcf;
     ngx_http_core_srv_conf_t   **cscfp;
     ngx_http_core_main_conf_t   *cmcf;
-
+    
     /* the main http context */
 
     ctx = ngx_pcalloc(cf->pool, sizeof(ngx_http_conf_ctx_t));
diff -urN nginx-0.7.65/src/http/ngx_http.h nginx-0.7.65_full_status/src/http/ngx_http.h
--- nginx-0.7.65/src/http/ngx_http.h	2009-05-08 18:52:50.000000000 +0400
+++ nginx-0.7.65_full_status/src/http/ngx_http.h	2010-06-26 20:03:18.000000000 +0400
@@ -11,7 +11,6 @@
 #include <ngx_config.h>
 #include <ngx_core.h>
 
-
 typedef struct ngx_http_request_s     ngx_http_request_t;
 typedef struct ngx_http_upstream_s    ngx_http_upstream_t;
 typedef struct ngx_http_cache_s       ngx_http_cache_t;
diff -urN nginx-0.7.65/src/http/ngx_http_request.c nginx-0.7.65_full_status/src/http/ngx_http_request.c
--- nginx-0.7.65/src/http/ngx_http_request.c	2010-02-01 18:06:25.000000000 +0300
+++ nginx-0.7.65_full_status/src/http/ngx_http_request.c	2010-06-26 20:03:18.000000000 +0400
@@ -252,7 +252,7 @@
 #endif
 
     c = rev->data;
-
+    
     if (rev->timedout) {
         ngx_log_error(NGX_LOG_INFO, c->log, NGX_ETIMEDOUT, "client timed out");
 
@@ -2839,6 +2839,27 @@
     }
 
 #endif
+#if (NGX_FULL_STATUS)
+    if (r->headers_in.host) {
+        ngx_str_t vihost_name = r->headers_in.host->value;
+        ngx_server_stat_t *cserver = find_stat(vihost_name);    
+
+        if (cserver) {
+            ngx_time_t      *tp;
+            ngx_msec_int_t   ms;
+            
+            tp = ngx_timeofday();
+            ms = (ngx_msec_int_t)
+                ((tp->sec - r->start_sec) * 1000 + (tp->msec - r->start_msec));			    
+            ms = (ms >= 0) ? ms : 0;
+            ngx_atomic_fetch_add(&(cserver->ngx_stat_time), ms);
+            ngx_atomic_fetch_add(&(cserver->ngx_stat_requests), 1);
+	    ngx_atomic_fetch_add(&(cserver->ngx_stat_traf), r->request_length);
+        }
+    }
+
+#endif
+
 
     if (error && r->headers_out.status == 0) {
         r->headers_out.status = error;
@@ -2918,7 +2939,6 @@
 #if (NGX_STAT_STUB)
     (void) ngx_atomic_fetch_add(ngx_stat_active, -1);
 #endif
-
     c->destroyed = 1;
 
     pool = c->pool;
diff -urN nginx-0.7.65/src/http/ngx_http_request.h nginx-0.7.65_full_status/src/http/ngx_http_request.h
--- nginx-0.7.65/src/http/ngx_http_request.h	2010-02-01 18:54:02.000000000 +0300
+++ nginx-0.7.65_full_status/src/http/ngx_http_request.h	2010-06-26 20:03:18.000000000 +0400
@@ -506,6 +506,10 @@
     unsigned                          stat_reading:1;
     unsigned                          stat_writing:1;
 #endif
+#if (NGX_FULL_STATUS)
+    unsigned                          full_stat_reading:1;
+    unsigned                          full_stat_writing:1;
+#endif
 
     unsigned                          subrequests:8;
 
